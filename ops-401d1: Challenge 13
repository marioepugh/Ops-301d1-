#!/usr/bin/env python

#script Name: nstOps13.py
#Author: Mario Pugh
#Date: 10/20/2020
#Description of purpose: Network Security Tool with Scapy

import ipaddress
import sys
import socket
import random
from scapy.all import sr1,IP,ICMP,TCP,ARP,Ether,srp
#Declaration of variable
def interface():
    user_choice = input("""
    what do you want to perform?
    1) TCP Port Range Scanner for Specific Port (mode 1)
    2) ICMP Ping Sweep (mode 2)
    3) TCP Port Range Scanner (mode 3)
    4) exit
    """)
    if(user_choice == "1"):
        rangeScanner(input("Please enter your ip: "))
    elif(user_choice == "2"):
        pingSweep()
    elif(user_choice == "3"):
        portRangeScanner()
    else:
        print("Exiting....")
        exit()
def rangeScanner(host):
    if host == None:
        return
    host_count = 0
    port_range = [21, 22, 23]
    src_port = 22
    dst_port = 22
### (dst=host) which is
    response = sr1(IP(dst=host)/TCP(sport=src_port,dport=dst_port,flags="S"),timeout=1,verbose=0)
###Function###
    for dst_port in port_range:
        src_port = random.randint(1025,65534)
        if response is None:
            print("packet filtered")
        elif(response.haslayer(TCP)):
            if(response.getlayer(TCP).flags == 0x12): #port responding and open
                print("Port " + str(dst_port) + " is open")
            elif (response.getlayer(TCP).flags == 0x14):#port responding and closed
                print("Port " + str(dst_port) + " is closed")
            else:
                print("The port is filtered and dropped")#port is filtered and dropped silently
def pingSweep():
    network = input("Enter your network address with the CIDR block code: ")
    addresses = ipaddress.IPv4Network(network)
    host_count = 0
    for host in addresses:
        if (host in (addresses.network_address, addresses.broadcast_address)):
            continue
        resp = sr1(
            IP(dst=str(host))/ICMP(),
            timeout=2,
            verbose=0,
        )
        if resp is None:
            print(f"{host} is down or not responding.")
        elif (
            int(resp.getlayer(ICMP).type)==3 and
            int(resp.getlayer(ICMP).code) in [1,2,3,9,10,13]
        ):
            print(f"{host} is blocking ICMP.")
        else:
            print(f"{host} is responding.")
            host_count += 1
    print(f"{host_count}/{addresses.num_addresses} hosts are online.")
def portRangeScanner():
    request = ARP()
    request.pdst = input("Enter your ip with the CIDR block: ")
    broadcast = Ether()
    broadcast.dst = 'ff:ff:ff:ff:ff:ff'
    request_broadcast = broadcast / request
    clients = srp(request_broadcast, timeout = 1)[0]
    for element in clients:
         rangeScanner(element[1].psrc)
         print(element[1].psrc + "      " + element[1].hwsrc)
#Main
while True:
    interface()
#End
