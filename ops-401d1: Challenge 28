#!/usr/bin/env python3
# Script:                   401 Op Challenge Day 28
# Author:                   Mario Pugh
# Date of latest revision:  11/11/20
# Purpose:                  Automated Brute Force Wordlist Attack Tool (1 of 3)

# Import libraries
import logging
import itertools
import operator 
import time 
import logging, time, os
from logging.handlers import RotatingFileHandler

#Declaration of variable
def interface():
    user_choice = input("""

                                       .;;!!!@!!!;.
.!!!!!;.                             .;!!!!!!!!!!!!!
----!!!!!!.                       .;!!!!!!!!!!UWWW$$$   
    :$$NWX!!:                  .:!!!!!!XUWW$$$$$$$$$P
    $$$$$##WX!;            :<!!!!UW$$$$$"  $$$$$$$$#
    $$$$$  $$$UX         :!!UW$$$$$$$$$$   4$$$$$*
    ^$$$B  $$$$\           $$$$$$$$$$$$$   d$$R"
      "*$bd$$$$            '*$$$$$$$$$$$$o+#"
           ''''                ''''''''



                                         xxxxx
 xxxxxx                                xxx   
     xx                              xxx
      xx                            xxx
       xx                         xxx  
         xx                    xxx    
            xxxxxxxxxxxxxxxxx x 
                xxxxxxxxx
                  xxxxx

    Which attack would you like to perform?
    1. Brute Force Mode 1 Attack Tool
    2. Brute Force Mode 2 Attack Tool
    3. Event Logging 
    4. Exit

    """)

    if(user_choice == "1"):
        bfAttackToolMod1()
    elif(user_choice == "2"):
        bfAttackToolMode2()
    elif(user_choice == "3"):
        elogger()
    else:
        print("Exiting....")
        exit()       

# Mode 1: Offensive; Dictionary Iterator
# Accepts a user input word list file path and iterates through the word list, assigning the word being read to a variable.
def bfAttackToolMode1():
    word_list = input("Enter a file to analyze: ")
    filename=open(word_list, "r", encoding= "ISO-8859-1")
    fileline=filename.readlines()

    for line in fileline:
# Print to the screen the value of the variable.
        print(line)
# Add a delay between words.\
        time.sleep(2)

# Mode 2: Defensive; Password Recognized
# Accepts a user input string.
# Accepts a user input word list file path.
def bfAttackToolMode2(): 
    cracked_password = input("Input the password to search: ")
    cracked_list = input("Enter a file to analyze: ")   
    filename=open(cracked_list, "r", encoding= "ISO-8859-1")
    fileline=filename.read().splitlines() 

    for line in fileline:

        if str(line) == cracked_password:
          print("Match found") 
          break
        else:
          print("No match found") 
    input()      

# Search the word list for the user input string.   

# Print to the screen whether the string appeared in the word list.
 #   print()   

# Defining lists 
L1 = [1, 2, 3] 
L2 = [2, 3, 4] 

# Starting time before map  
# function 
t1 = time.time() 

# Calculating result 
# a, b, c = map(operator.mul, L1, L2) 

# Ending time after map 
# function 
t2 = time.time() 

# Time taken by map function 
# print("Result:", a, b, c) 
print("Time taken by map function: %.6f" %(t2 - t1)) 

# Starting time before naive  
# method 
t1 = time.time() 

# Calculating result usinf for loop 
# print("Result:", end = " ") 
for i in range(3): 
    print(L1[i] * L2[i], end = " ") 

# Ending time after naive 
# method 
t2 = time.time() 
print("\nTime taken by for loop: %.6f" %(t2 - t1)) 

# Main

logging.basicConfig(filename='./sample_log2.txt', level=logging.ERROR, format='%(asctime)s:%(levelname)s:%(message)s')
print('Logging started')
logging.debug('Debug Information')
logging.info('info Information')
logging.warning('warning Information')
logging.error('error Information')
logging.critical('critical Information')
print('Logging end')

def elogger():
    logger = logging.getLogger('my_logger')
    logger.setLevel(logging.WARNING)
    user_input = input("'''''''What size would you like it capped  to?  ")
    handler = RotatingFileHandler('my_log.log', maxBytes=int (user_input), backupCount=10) #set each VALUE
    logger.addHandler(handler)

    for i in range(5): #set each VALUE
        logmsg = "Hello world!"
        logmsg += str(i)
        logger.warning(logmsg)
        print ("Logging Hello world! number", i)
 #       os.system("ls -al")
        time.sleep(.1)

# Create a custom logger
logger = logging.getLogger(__name__)
'''
NOTE: Use __name__ to generically reference the name of the python file that called logging.getlogger. This way if you change the file name, you don't have to update this.

Create handlers.
'''
print("Welcome! This demo script will illustrate the workflow for creating handlers. Let's begin.")
time.sleep(2)

print("Creating handlers...")
c_handler = logging.StreamHandler()
f_handler = logging.FileHandler('file.log') # This file will appear in the same directory as this script.
c_handler.setLevel(logging.WARNING)
f_handler.setLevel(logging.ERROR)
time.sleep(2)
'''
Next, we will create formatters and add it to handlers. 
For warnings we want name, level, and message. 
For errors we want to record time, name, level, and message to a log file.
'''
print("Creating formatters and adding them to handlers respectively...")
c_format = logging.Formatter('%(name)s - %(levelname)s - %(message)s')
f_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
c_handler.setFormatter(c_format)
f_handler.setFormatter(f_format)
time.sleep(2)

# Add handlers to the logger
print("Adding handlers to the logger...")
logger.addHandler(c_handler)
logger.addHandler(f_handler)
time.sleep(2)

# These should print to the screen. However, because errors are sent into the file handler, they'll also get appended into the log file.
print("Generating one warning log and one error log...")
logger.warning('This is a warning')
logger.error('This is an error')
time.sleep(2)

print("Program complete. View 'file.log' to see errors.")
os.system("ls -al")

try:
    interface()
except Exception as msg:
    logging.error(msg)
    print(msg)
# End
